import datetime
import time
import pandas as pd
import numpy as np

CITY_DATA = {'chicago':'chicago.csv',
             'new york city':'new_york_city.csv',
             'washington':'washington.csv'}


def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city = str(input("please enter a city from this list [CHICAGO,NEW YORK CITY ,WASHINGTON]")).lower()
        if city in CITY_DATA.keys():
            break
        else:
            print("please try to choose again carefully")


    # get user input for month (all, january, february, ... , june)
    months = ["all", "january", "february", "march", "april", "may", "june"]
    while True:
        i = str(input("please enter a month from this list[all,january,february,march,april,may,june]")).lower()
        if i in months:
            break
        else:
            print("please enter a valid month from the list")

    # get user input for day of week (all, monday, tuesday, ... sunday)
    daysofweek = ["all", "saturday", "sunday", "monday", "tuesday", "wednesday", "thursday", "friday"]
    while True:
        j = str(input(
            "please enter a day from this list[all,saturday,sunday,monday,tuesday,wednesday,thursday,friday")).lower()
        if j in daysofweek:
            break
        else:
            print("please try to choose again carefully")

    print('-' * 40)
    return city, i, j


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    #  Loads data for the specified city
    a = pd.read_csv(CITY_DATA[city])

    # converting Start Time column from string to date and time by using to_datetime
    a['Start Time'] = pd.to_datetime(a['Start Time'])

    #extracting the month
    a['The month'] = a['Start Time'].dt.month_name()
    #extracting the day
    a['The day of week'] = a['Start Time'].dt.day_name()
    #extract hours to calculate most common start hour
    a["hour"]=a["Start Time"].datetime.datetime.now().hour

    # filter by month if applicable
    if month != 'all':
        a = a[a['The month'].str.startswith(month.title())]

    # filter by day of week
    if day != 'all':
        a = a[a['The day of week'].str.startswith(day.title())]

    return a


def time_stats(a):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    print("The most common month is", a["The month"].mode())

    # display the most common day of week where o indicates monday and 6 indicates sunday
    the_most_common_dayofweek = a["The day of week"].mode()
    print("The most common day of week is", the_most_common_dayofweek)

    # display the most common start hour
    print("The most common start hour is{}".format(a["hour"].mode()))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def station_stats(a):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    the_most_common_startstation = a["Start Station"].mode()
    print("Displaying most commonly used start station", the_most_common_startstation)

    # display most commonly used end station
    z = a["End Station"].mode()
    print("Dispalying most commonly used end station:{}".format(z))

    # display most frequent combination of start station and end station trip
    a["start and end station"] = a["Start Station"] + a["End Station"]
    print(" most frequent combination of start station and end station trip", a["start and end station"].mode())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def trip_duration_stats(a):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    print("Total travel time", a["Trip Duration"].sum())

    # display mean travel time
    print("Average travel time", a["Trip Duration"].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def user_stats(a):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    print("Displaying counts of user types:", a["User Type"].value_counts())

    # Display counts of gender
    # Display earliest, most recent, and most common year of birth
    # since washington does not have gender or birth year columns so we did this
    try:
        g = a["Gender"].value_counts()
        print("counts of gender", g)
        print("earliest year of birth", a["Birth Year"].min())
        print("most recent year of birth", a["Birth Year"].max())
        print("most common year of birth", a["Birth Year"].mode())
    except:
        print("Sorry this city does not have gender information")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def rawinputchoice(a):
    choice = ['yes', 'no']
    mychoice = ''
    counter = 0
    while mychoice not in choice:
        mychoice = input("Please choose to view 5 rows from the data or not by write yes or no").lower()
        # the raw data from the a is displayed if user write yes ( 5 rows are viewed)
        if mychoice == "yes":
            print(a.head())
        elif mychoice not in choice:
            print("Sorry it seems you have entered a wrong choice please be stick to yes or no only")

    # while loop  to ask user if they want to continue viewing more 5 rows

    while mychoice == 'yes':
        counter += 5
        mychoice = input("enter yes if you want to see more data").lower()
        if mychoice == "yes":
            print(a[counter:counter + 5])

        elif mychoice!="yes":
            break



def main():
    while True:
        city, month, day = get_filters()
        a = load_data(city, month, day)

        time_stats(a)
        station_stats(a)
        trip_duration_stats(a)
        user_stats(a)
        rawinputchoice(a)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()
